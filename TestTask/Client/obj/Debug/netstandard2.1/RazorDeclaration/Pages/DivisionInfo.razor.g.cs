// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TestTask.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "G:\TestTask\TestTask\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "G:\TestTask\TestTask\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "G:\TestTask\TestTask\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "G:\TestTask\TestTask\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "G:\TestTask\TestTask\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "G:\TestTask\TestTask\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "G:\TestTask\TestTask\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "G:\TestTask\TestTask\Client\_Imports.razor"
using TestTask.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "G:\TestTask\TestTask\Client\_Imports.razor"
using TestTask.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "G:\TestTask\TestTask\Client\Pages\DivisionInfo.razor"
using TestTask.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "G:\TestTask\TestTask\Client\Pages\DivisionInfo.razor"
using TestTask.Client.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "G:\TestTask\TestTask\Client\Pages\DivisionInfo.razor"
using System.Diagnostics;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "G:\TestTask\TestTask\Client\Pages\DivisionInfo.razor"
using Blazored.SessionStorage;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/divisionInfo/{Id:int}")]
    public partial class DivisionInfo : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 67 "G:\TestTask\TestTask\Client\Pages\DivisionInfo.razor"
       
    [Parameter]
    public int Id { get; set; }

    private Division _division;
    private int? _subDivisionId;
    private List<Division> _divisions;
    private List<Division> _divisionsToAdd;
    private List<Division> _subDivisionsToAdd = new List<Division>();
    private int _divisionId;

    public int DivisionId
    {
        get => _divisionId;
        set
        {
            _divisionId = value;
            _division.DivisionId = value;
            _storageService.SetItem("currentDivisionIdFromList", value);
            SaveDivision();
        }
    }

    protected override void OnParametersSet()
    {
        _divisions = _divisionsToAdd = _subDivisionsToAdd = new List<Division>();
        InitializeData();
        StateHasChanged();
    }

    private void InitializeData()
    {
        var divisionFromSession = GetDivisionFromSession();
        if (Program.AppData.CurrentDivision == null && divisionFromSession != null)
        {
            _division = divisionFromSession;
            GetDivisions();
            FillSubDivisions();
        }
        else
        {
            _division = _stateMachine.CurrentState is StateMachine.State.Add
                ? new Division()
                : Program.AppData.CurrentDivision;
            _storageService.SetItem("currentDivision", _division);
        }

        DivisionId = Program.AppData.CurrentDivisionFromList?.Id ?? _division.DivisionId ?? 0;
        Debug.WriteLine(DivisionId);
        StateHasChanged();

        GetDivisions();

        if (_stateMachine.CurrentState is StateMachine.State.Change && _division.SubDivisions != null)
            FillSubDivisions();
    }

    private Division GetDivisionFromSession()
    {
        try
        {
            return _storageService.GetItem<Division>("currentDivision");
        }
        catch
        {
            return null;
        }
    }

    private void GetDivisions()
    {
        var divisionsList = Program.AppData.Divisions.Where(d => d.Id != _division.Id).ToList();
        divisionsList.ForEach(d =>
        {
            d.ParentDivision = null;
            d.Employees = new HashSet<Employee>();
            d.SubDivisions = new HashSet<Division>();
        });
        _divisionsToAdd = divisionsList;
        divisionsList.Insert(0, new Division {Title = "Нет"});
        _divisions = divisionsList.ToList();
    }

    /// <summary>
    /// Заполняет список вложенных подразделений
    /// </summary>
    private void FillSubDivisions()
    {
        var subDivisions = _division.SubDivisions.ToList();

        foreach (var subDivision in subDivisions)
        {
            var subDivisionFromList = _divisionsToAdd.FirstOrDefault(d => d.Id == subDivision.Id);
            _divisions.Remove(subDivisionFromList);
            _divisionsToAdd.Remove(subDivisionFromList);
            _subDivisionsToAdd.Add(subDivisionFromList);
        }
    }

    /// <summary>
    /// Добавляет подразделение в список вложенных подразделений
    /// </summary>
    private void AddSubDivision()
    {
        var divisionToAdd = _divisionsToAdd.FirstOrDefault(d => d.Id == _subDivisionId);

        if (divisionToAdd is null)
            return;

        _divisions.Remove(divisionToAdd);
        _divisionsToAdd.Remove(divisionToAdd);
        _subDivisionsToAdd.Add(divisionToAdd);

        _division.SubDivisions = _subDivisionsToAdd;

        _subDivisionId = null;
        SaveDivision();
    }

    private async Task ApplyButton_OnClick()
    {
        if (string.IsNullOrWhiteSpace(_division.Title))
            return;

        if (_division.DivisionId == 0)
        {
            _division.DivisionId = null;
        }
        _division.ParentDivision = null;
        _division.Employees = new HashSet<Employee>();
        _division.SubDivisions = _subDivisionsToAdd;

        var response = _stateMachine.CurrentState is StateMachine.State.Change
            ? await PutDivisionAsync()
            : await PostDivisionAsync();

        if (!response.IsSuccessStatusCode)
        {
            Debug.WriteLine(await response.Content.ReadAsStringAsync());
            return;
        }

        await Program.AppData.RefreshBaseProperties();
        _eventAggregator.InvokeDivisionCollectionChanged();

        _navigationManager.NavigateTo(Program.LastPageUrl);
    }

    private async Task<HttpResponseMessage> PutDivisionAsync()
    {
        var response = await _http.PutAsJsonAsync("divisions", _division);
        return response;
    }

    private async Task<HttpResponseMessage> PostDivisionAsync()
    {
        var response = await _http.PostAsJsonAsync("divisions", _division);

        return response;
    }

    private void DeleteSubDivision(Division subDivision)
    {
        _subDivisionsToAdd.Remove(subDivision);
        _divisionsToAdd.Add(subDivision);

        _division.SubDivisions = _subDivisionsToAdd;
        _storageService.SetItem("currentDivision", _division);
    }

    private void SaveDivision()
    {
        _storageService.Clear();
        _storageService.SetItem("currentDivision", _division);
    }

    private void GoBack()
    {
        _navigationManager.NavigateTo(Program.LastPageUrl);
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISyncSessionStorageService _storageService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager _navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private EventAggregator _eventAggregator { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient _http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private StateMachine _stateMachine { get; set; }
    }
}
#pragma warning restore 1591
