@page "/employees/{Id:int}"
@using TestTask.Shared
@using TestTask.Client.Services
@using Blazored.SessionStorage
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject StateMachine _stateMachine
@inject ISessionStorageService _storageService
<h1 class="info__title">Сотрудники</h1>
<h1 class="info__title">@_title</h1>
<button @onclick="EmployeeAddButton_OnClick" class="main--btn inverted">Добавить</button>



@if (_employees is null || _currentDivision is null || _divisions is null)
{
    <span>Загрузка</span>
}
else
{
    <div class="subdiv__wrapper">
        @foreach (var employee in _employees)
        {
            <div class="subdiv__item">
                <span style="font-size: 20px; font-weight: 700">@employee.FullName</span>
                <div>
                    <img style="width: 20px; cursor: pointer" src="css/edit--green.svg" @onclick="() => EmployeeChangeButton_OnClick(employee)" alt="" />
                    <img style="width: 20px; cursor: pointer" src="css/delete--green.svg" @onclick="() => DeleteButton_OnClick(employee)" alt="" />
                </div>
            </div>
        }
        <div>
            <h3>Работники во вложенных подразделениях</h3>

            @if (_currentDivision.SubDivisions.Count > 0)
            {
                @(GetEmployeesInSubDivisions(@<div></div>))
            }
            else
            {
                <p>Работников нет</p>
            }
        </div>

    </div>
}

@if (_modalOpen)
{
    <Modal Title="@_modalTitle"
           Text="@_modalText"
           IsConfirmation="_modalConfirmation"
       OnClose="Modal_OnClose"></Modal>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private string _title;
    private List<Employee> _employees;
    private bool _modalOpen;
    private string _modalText;
    private string _modalTitle;
    private List<Employee> _existEmployees;
    private Division _currentDivision;
    private IEnumerable<Division> _divisions;
    private bool _modalConfirmation;


    protected override async void OnParametersSet()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        _existEmployees = new List<Employee>();

        _currentDivision = Program.AppData.SelectedDivision 
                           ?? (Program.AppData.SelectedDivision = (await Program.AppData.GetDivisionsAsync()).FirstOrDefault(d => d.Id == Id));
        Program.AppData.SelectedDivisionFromList = _currentDivision;
        _divisions = await Program.AppData.GetDivisionsAsync();
        _title = _currentDivision?.Title;
        _employees = new List<Employee>();
        _employees = Program.AppData.Employees.Where(e => e.DivisionId != null && e.DivisionId == _currentDivision.Id).ToList();
        if (_currentDivision?.SubDivisions.Count > 0)
        {
            foreach (var subDivision in _currentDivision.SubDivisions)
            {
                FillEmployeesListFromSubDivisions(subDivision);
            }
        }
        StateHasChanged();
    }

    private async Task EmployeeChangeButton_OnClick(Employee employee)
    {
        _stateMachine.SetState(StateMachine.State.Change);
        Program.AppData.SelectedEmployee = employee;
        Program.EmployeeInfoPageOpened = true;
        await _storageService.SetItemAsync("employeeId", employee.Id);
        _navigationManager.NavigateTo("employeeInfo");
    }

    private async Task Modal_OnClose(bool success)
    {
        _modalOpen = false;
        if (_stateMachine.CurrentState != StateMachine.State.Delete)
        {
            return;
        }
        var employeeToDelete = Program.AppData.SelectedEmployee;
        Program.AppData.SelectedEmployee = null;

        if (!success)
        {
            return;
        }

        var response = await _http.DeleteAsync($"employees?id={employeeToDelete.Id}");

        if (!response.IsSuccessStatusCode)
        {
            _stateMachine.SetState(StateMachine.State.Idle);
            _modalOpen = true;
            _modalTitle = "Ошибка удаления";
            _modalText = "Не удалось удалить сотрудника";
            _modalConfirmation = true;
            return;
        }

        var employeeFromList = Program.AppData.Employees.FirstOrDefault(e => e.Id == employeeToDelete.Id);

        Program.AppData.Employees.Remove(employeeFromList);

        if (employeeFromList.DivisionId != Id)
        {
            _existEmployees.Remove(employeeFromList);
            return;
        }

        _employees.Remove(employeeFromList);
    }

    private async Task DeleteButton_OnClick(Employee employee)
    {
        Program.AppData.SelectedEmployee = employee;
        await _storageService.SetItemAsync("currentEmployee", employee);
        _modalTitle = "Подтверждение удаления";
        _modalText = "Вы действительно хотите удалить сотрудника?";
        _modalOpen = true;
        _modalConfirmation = true;
        _stateMachine.SetState(StateMachine.State.Delete);
    }

    private async Task EmployeeAddButton_OnClick()
    {
        _stateMachine.SetState(StateMachine.State.Add);
        await _storageService.SetItemAsync<Employee>("currentEmployee", null);
        _navigationManager.NavigateTo("employeeInfo");
    }

    /// <summary>
    /// Генерирует разметку для каждого сотрудника в подразделениях
    /// </summary>
    /// <param name="fragment"></param>
    /// <returns></returns>
    private RenderFragment GetEmployeesInSubDivisions(RenderFragment fragment)
    {
        foreach (var employee in _existEmployees)
        {
            fragment +=
    @<div class="subdiv__item">
        <span style="font-size: 20px; font-weight: 700">@employee.FullName (@_divisions.FirstOrDefault(d => d.Id == employee.DivisionId)?.Title)</span>
        <div>
            <img style="width: 20px; cursor: pointer" src="css/edit--green.svg" @onclick="() => EmployeeChangeButton_OnClick(employee)" alt="" />
            <img style="width: 20px; cursor: pointer" src="css/delete--green.svg" @onclick="() => DeleteButton_OnClick(employee)" alt="" />
        </div>
    </div>
    ;
        }

        return fragment;
    }

    /// <summary>
    /// Заполняет список сотрудников из вложенных подразделений
    /// </summary>
    /// <param name="division"></param>
    private void FillEmployeesListFromSubDivisions(Division division)
    {
        var employeesFromDivision = Program.AppData.Employees.Where(e => e.DivisionId == division.Id && _existEmployees.All(emp => emp.Id != e.Id)).ToList();

        _existEmployees.AddRange(employeesFromDivision);

        if (division.SubDivisions.Count == 0) return;

        foreach (var subDivision in division.SubDivisions.ToList())
        {
            FillEmployeesListFromSubDivisions(subDivision);
        }
    }
}