@page "/employees/{Id:int}"
@using TestTask.Shared
@using TestTask.Client.Services
@using System.Diagnostics
@using System.Collections
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject AppData _appData
@inject StateMachine _stateMachine
<h1 class="info__title">Сотрудники</h1>
<h1 class="info__title">@_appData.CurrentDivision.Title</h1>
<button @onclick="EmployeeAddButton_OnClick" class="main--btn inverted">Добавить</button>



@if (_employees is null)
{
    <span>Загрузка</span>
}
else
{
    <div class="subdiv__wrapper">
        @foreach (var employee in _employees)
        {
            <div class="subdiv__item">
                <span style="font-size: 20px; font-weight: 700">@employee.FullName</span>
                <div>
                    <img style="width: 20px; cursor: pointer" src="css/edit--green.svg" @onclick="() => EmployeeChangeButton_OnClick(employee)" alt="" />
                    <img style="width: 20px; cursor: pointer" src="css/delete--green.svg" @onclick="() => DeleteButton_OnClick(employee)" alt="" />
                </div>
            </div>
        }
        <div>
            <h3>Работники во вложенных подразделениях</h3>

            @if (_appData.CurrentDivision.SubDivisions != null && _appData.CurrentDivision.SubDivisions.Count > 0)
            {
                @(GetEmployeesInSubDivisions(@<div></div>))
            }
            else
            {
                <p>Работников нет</p>
            }
        </div>

    </div>
}

@if (_modalOpen)
{
    <Modal Title="@_modalTitle"
       Text="@_modalText"
       OnClose="Modal_OnClose"></Modal>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private List<Employee> _employees;
    private bool _modalOpen;
    private string _modalText;
    private string _modalTitle;
    private List<Employee> _existEmployees;


    protected override async void OnParametersSet()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        _existEmployees = new List<Employee>();

        var division = _appData.CurrentDivision;
        if (division.SubDivisions != null && division.SubDivisions.Count > 0)
        {

            foreach (var subDivision in division.SubDivisions)
            {
                FillEmployeesListFromSubDivisions(subDivision);
            }
        }
        _employees = new List<Employee>();
        _employees = await _http.GetFromJsonAsync<List<Employee>>($"employees?divisionId={_appData.CurrentDivision.Id}");
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private void EmployeeChangeButton_OnClick(Employee employee)
    {
        _stateMachine.SetChangeState();
        _appData.CurrentDivisionFromEmployee = _appData.Divisions.FirstOrDefault(d => d.Id == employee.DivisionId);
        _appData.CurrentEmployee = employee;
        _navigationManager.NavigateTo("employeeInfo");
    }

    private async Task Modal_OnClose(bool success)
    {
        _modalOpen = false;
        if (_stateMachine.CurrentState != StateMachine.State.Delete)
        {
            return;
        }
        var employeeToDelete = _appData.CurrentEmployee;
        _appData.CurrentEmployee = null;

        if (!success)
        {
            return;
        }

        var response = await _http.DeleteAsync($"employees?id={employeeToDelete.Id}");

        if (!response.IsSuccessStatusCode)
        {
            _stateMachine.SetIdleState();
            _modalOpen = true;
            _modalTitle = "Ошибка удаления";
            _modalText = "Не удалось удалить сотрудника";
            return;
        }

        _employees.Remove(employeeToDelete);
    }

    private void DeleteButton_OnClick(Employee employee)
    {
        _appData.CurrentEmployee = employee;
        _modalTitle = "Подтверждение удаления";
        _modalText = "Вы действительно хотите удалить сотрудника?";
        _modalOpen = true;
        _stateMachine.SetDeleteState();
    }

    private void EmployeeAddButton_OnClick()
    {
        _stateMachine.SetAddState();
        _appData.CurrentEmployee = null;
        _navigationManager.NavigateTo("employeeInfo");
    }

    /// <summary>
    /// Генерация кода для каждого сотрудника в подразделениях
    /// </summary>
    /// <param name="fragment"></param>
    /// <returns></returns>
    private RenderFragment GetEmployeesInSubDivisions(RenderFragment fragment)
    {
        foreach (var employee in _existEmployees)
        {
            fragment +=
    @<div class="subdiv__item">
        <span style="font-size: 20px; font-weight: 700">@employee.FullName (@_appData.Divisions.FirstOrDefault(d => d.Id == employee.DivisionId)?.Title)</span>
        <div>
            <img style="width: 20px; cursor: pointer" src="css/edit--green.svg" @onclick="() => EmployeeChangeButton_OnClick(employee)" alt="" />
            <img style="width: 20px; cursor: pointer" src="css/delete--green.svg" @onclick="() => DeleteButton_OnClick(employee)" alt="" />
        </div>
    </div>;
        }

        return fragment;
    }

    private void FillEmployeesListFromSubDivisions(Division division)
    {
        var employeesFromDivision = division.Employees.Where(e => _existEmployees.All(emp => emp.Id != e.Id)).ToList();

        _existEmployees.AddRange(employeesFromDivision);

        if (division.SubDivisions == null || division.SubDivisions.Count == 0) return;

        foreach (var subDivision in division.SubDivisions.ToList())
        {
            FillEmployeesListFromSubDivisions(subDivision);
        }
    }

}


