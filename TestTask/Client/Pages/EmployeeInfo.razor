@page "/employeeInfo"
@using TestTask.Shared
@using TestTask.Client.Services
@using System.Diagnostics
@using Blazored.SessionStorage
@using Newtonsoft.Json
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject StateMachine _stateMachine
@inject ISyncSessionStorageService _storageService
<h3 class="info__title">Информация о сотруднике</h3>
<button @onclick="GoBack" class="main--btn inverted">Назад</button>
<EditForm Model="@_employee">
    <div>
        <label for="lastname">Фамилия</label>
        <input id="lastname" placeholder="Фамилия" @bind="@_employee.LastName" @oninput="(e) => { _employee.LastName = (string)e.Value; SaveEmployee(); }"/>
    </div>
    <div>
        <label for="firstname">Имя</label>
        <input id="firstname" placeholder="Имя" @bind="@_employee.FirstName" @oninput="(e) => { _employee.FirstName = (string)e.Value; SaveEmployee(); }"/>
    </div>
    <div>
        <label for="middlename">Отчество</label>
        <input id="middlename" placeholder="Отчество" @bind="@_employee.MiddleName" @oninput="(e) => { _employee.MiddleName = (string)e.Value; SaveEmployee(); }"/>
    </div>
    <div>
        <label for="birth">Дата рождения</label>
        <input id="birth" type="date" placeholder="Выберите дату" @bind="@_employee.DateOfBirth" @oninput="(e) => { _employee.DateOfBirth = DateTime.Parse((string)e.Value); SaveEmployee(); }"/>
    </div>
    <div>
        <label for="gender">Пол</label>
        <InputSelect id="gender" @bind-Value="_employee.Gender">
            @foreach (var gender in Enum.GetValues(typeof(Gender)).Cast<Gender>())
            {
                <option value="@gender">@GenderHelper.GetGenderTitle(gender)</option>
            }
        </InputSelect>
    </div>
    <div>
        <input type="checkbox" @bind="@_employee.HasDriverLicense"/> Есть водительские права
    </div>
    <div>
        <label for="division">Подразделение</label>
        <select id="division" @bind="DivisionId"
                class="custom-select-sm">
            @foreach (var division in _divisions)
            {
                <option value="@division.Id">@division.Title</option>
            }
        </select>
    </div>
    <div hidden="@_isErrorHidden">
        @_errorText
    </div>

    <button @onclick="async () => await Apply()" class="main--btn inverted">Применить</button>
</EditForm>


@code {
    private Employee _employee = new Employee();
    private Employee _employeeBackup;
    private IEnumerable<Division> _divisions = new List<Division>();
    private bool _isErrorHidden = true;
    private string _errorText;
    private int? _divisionId;

    public int? DivisionId
    {
        get => _divisionId;
        set
        {
            _divisionId = value;
            _employee.DivisionId = value;
            _storageService.SetItem("currentDivision", value);
            SaveEmployee();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await InitializeData();
    }

    protected override async Task OnInitializedAsync()
    {
        await InitializeData();
    }

    private async Task InitializeData()
    {
        _divisions = await Program.AppData.GetDivisionsAsync();

        var divisionFromSession = _storageService.GetItem<Employee>("currentEmployee");

        if (!Program.AppData.SelectedEmployee.CheckInitialize() && divisionFromSession != null)
        {
            _employee = divisionFromSession;
        }
        else
        {
            var currentDivision = GetDivisionFromSession();
            _employee = _stateMachine.CurrentState == StateMachine.State.Add
                ? new Employee
                {
                    DateOfBirth = DateTime.Now - TimeSpan.FromDays(365 * 18 + 1),
                    DivisionId = Program.AppData.SelectedDivision?.Id ?? currentDivision?.Id
                }
                : Program.AppData.SelectedEmployee;
            _storageService.SetItem("currentEmployee", _employee);
        }

        _employeeBackup = new Employee
        {
            FirstName = _employee.FirstName,
            LastName = _employee.LastName,
            MiddleName = _employee.MiddleName,
            Gender = _employee.Gender,
            DateOfBirth = _employee.DateOfBirth,
            HasDriverLicense = _employee.HasDriverLicense,
            DivisionId = _employee.DivisionId
        };

        DivisionId = _employee.DivisionId;
    }

    private Division GetDivisionFromSession()
    {
        try
        {
            return JsonConvert.DeserializeObject<Division>(_storageService.GetItemAsString("currentDivision"));
        }
        catch
        {
            return null;
        }
    }

    private async Task Apply()
    {
        if (string.IsNullOrWhiteSpace(_employee.FirstName) ||
            string.IsNullOrWhiteSpace(_employee.LastName) ||
            string.IsNullOrWhiteSpace(_employee.MiddleName))
        {
            _errorText = "Все поля должны быть заполнены!";
            _isErrorHidden = false;
            return;
        }

        if (_employee.DateOfBirth > DateTime.Now - TimeSpan.FromDays(365 * 18))
        {
            _errorText = "Работнику должно быть не меньше 18 лет";
            _isErrorHidden = false;
            return;
        }

        _isErrorHidden = true;

        _employee.Division = null;

        var response = _stateMachine.CurrentState is StateMachine.State.Change
        ? await PutEmployeeAsync()
        : await PostEmployeeAsync();

        if (!response.IsSuccessStatusCode)
        {
            Debug.WriteLine(await response.Content.ReadAsStringAsync());
            return;
        }

        if (_stateMachine.CurrentState == StateMachine.State.Add)
        {
            var id = await response.Content.ReadFromJsonAsync<int>();
            _employee.Id = id;
            Program.AppData.Employees.Add(_employee);
        }
        else
        {
            var employeeFromList = Program.AppData.Employees.FirstOrDefault(e => e.Id == _employee.Id);
            employeeFromList.FirstName = _employee.FirstName;
            employeeFromList.MiddleName = _employee.MiddleName;
            employeeFromList.LastName = _employee.LastName;
            employeeFromList.Gender = _employee.Gender;
            employeeFromList.DateOfBirth = _employee.DateOfBirth;
            employeeFromList.DivisionId = _employee.DivisionId;
            employeeFromList.HasDriverLicense = _employee.HasDriverLicense;
        }

        Program.AfterEmployeeInfoPage = true;
        _navigationManager.NavigateTo($"employees/{_divisionId}");
    }

    private async Task<HttpResponseMessage> PostEmployeeAsync()
    {
        var response = await _http.PostAsJsonAsync("employees", _employee);
        return response;
    }

    private async Task<HttpResponseMessage> PutEmployeeAsync()
    {
        var response = await _http.PutAsJsonAsync("employees/change", _employee);
        return response;
    }

    private void SaveEmployee()
    {
        _storageService.SetItem("currentEmployee", _employee);
    }

    private void GoBack()
    {
        _employee.FirstName = _employeeBackup.FirstName;
        _employee.FirstName = _employeeBackup.FirstName;
        _employee.LastName = _employeeBackup.LastName;
        _employee.MiddleName = _employeeBackup.MiddleName;
        _employee.Gender = _employeeBackup.Gender;
        _employee.DateOfBirth = _employeeBackup.DateOfBirth;
        _employee.HasDriverLicense = _employeeBackup.HasDriverLicense;
        _employee.DivisionId = _employeeBackup.DivisionId;
        _stateMachine.SetState(StateMachine.State.Idle);
        _navigationManager.NavigateTo(Program.LastPageUrl);
    }

}