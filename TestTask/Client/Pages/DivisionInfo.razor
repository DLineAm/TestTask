@page "/divisionInfo"
@using TestTask.Shared
@using TestTask.Client.Services
@using System.Diagnostics
@inject AppData _appData
@inject StateMachine _stateMachine
@inject HttpClient _http
@inject EventAggregator _eventAggregator
@inject NavigationManager _navigationManager
<h3 class="info__title">Информация о подразделении</h3>

<div>
    <label for="title">Наименование</label>
    <input id="title" placeholder="Наименование" @bind-value="@_division.Title" />
</div>
<div>
    <label for="date">Дата создания</label>
    <input type="date" id="date" placeholder="Выберите дату" @bind-value="@_division.CreateDate" />
</div>
<div>
    <label for="parent">Является подразделением</label>
    <select id="parent" @bind="_division.DivisionId">
        @foreach (var divisionFromData in _divisions)
        {
            <option value="@divisionFromData.Id">@divisionFromData.Title</option>
        }
    </select>
</div>
<div>
    <label for="desc">Описание</label>
    <textarea id="desc" @bind="_division.Description"></textarea>
</div>
<div>
    <div>
        <label for="child">Вложенные подразделения</label>
        
        <select id="child" @bind="_subDivisionId">
            @foreach (var divisionFromData in _divisionsToAdd)
            {
                <option value="@divisionFromData.Id">@divisionFromData.Title</option>
            }
        </select>
        <button @onclick="AddSubDivision" class="main--btn inverted">Добавить подразделение</button>
    </div>
    <div class="subdiv__wrapper">
        @if (_subDivisionsToAdd != null)
        {
            @foreach (var subDivision in _subDivisionsToAdd)
            {
                <div class="subdiv__item">
                    <div>
                        <span>@subDivision.Title</span>
                        <span>@subDivision.CreateDate.ToShortDateString()</span>
                    </div>
                    
                    <button @onclick="() => DeleteSubDivision(subDivision)" class="main--btn inverted">Удалить</button>
                </div>
            }
        }
    </div>
</div>

<button @onclick="async () => await ApplyButton_OnClick()" class="main--btn inverted">Принять</button>

@code {
    private Division _division;
    private int? _subDivisionId;
    private List<Division> _divisions;
    private List<Division> _divisionsToAdd;
    private readonly List<Division> _subDivisionsToAdd = new List<Division>();

    protected override void OnInitialized()
    {
        _division = _stateMachine.CurrentState is StateMachine.State.Add
            ? new Division()
            : _appData.CurrentDivision;

        var divisionsList = _appData.Divisions.Where(d => d.Id != _division.Id).ToList();
        divisionsList.ForEach(d =>
        {
            d.ParentDivision = null;
            d.Employees = new HashSet<Employee>();
            d.SubDivisions = new HashSet<Division>();
        });
        _divisionsToAdd = divisionsList;
        divisionsList.Insert(0, new Division { Title = "Нет" });
        _divisions = divisionsList;

        if (_stateMachine.CurrentState is StateMachine.State.Change && _division.SubDivisions != null)
            FillSubDivisions();
    }

    private void FillSubDivisions()
    {
        var subDivisions = _division.SubDivisions.ToList();

        foreach (var subDivision in subDivisions)
        {
            var subDivisionFromList = _divisionsToAdd.FirstOrDefault(d => d.Id == subDivision.Id);
            _divisions.Remove(subDivisionFromList);
            _divisionsToAdd.Remove(subDivisionFromList);
            _subDivisionsToAdd.Add(subDivisionFromList);
        }
    }

    private void AddSubDivision()
    {
        var divisionToAdd = _divisionsToAdd.FirstOrDefault(d => d.Id == _subDivisionId);

        if (divisionToAdd is null)
            return;

        _divisions.Remove(divisionToAdd);
        _divisionsToAdd.Remove(divisionToAdd);
        _subDivisionsToAdd.Add(divisionToAdd);

        _subDivisionId = null;
    }

    private async Task ApplyButton_OnClick()
    {
        if (string.IsNullOrWhiteSpace(_division.Title))
            return;

        _division.ParentDivision = null;
        _division.Employees = new HashSet<Employee>();
        _division.SubDivisions = _subDivisionsToAdd;

        var response = _stateMachine.CurrentState is StateMachine.State.Change 
            ? await PutDivisionAsync() 
            : await PostDivisionAsync();

        if (!response.IsSuccessStatusCode)
        {
            Debug.WriteLine(await response.Content.ReadAsStringAsync());
            return;
        }

        _eventAggregator.InvokeDivisionCollectionChanged();

        _navigationManager.NavigateTo("");
    }

    private async Task<HttpResponseMessage> PutDivisionAsync()
    {
        var response = await _http.PutAsJsonAsync("divisions", _division);
        return response;
    }

    private async Task<HttpResponseMessage> PostDivisionAsync()
    {
        var response = await _http.PostAsJsonAsync("divisions", _division);
        return response;
    }

    private void DeleteSubDivision(Division subDivision)
    {
        _subDivisionsToAdd.Remove(subDivision);
        _divisionsToAdd.Add(subDivision);
    }

}