@page "/divisionInfo/{Id:int}"
@using TestTask.Shared
@using TestTask.Client.Services
@using System.Diagnostics
@using Blazored.SessionStorage
@using TestTask.Client.Utils
@inject StateMachine _stateMachine
@inject HttpClient _http
@inject EventAggregator _eventAggregator
@inject NavigationManager _navigationManager
@inject ISyncSessionStorageService _storageService
<h3 class="info__title">Информация о подразделении</h3>
<button class="main--btn inverted" @onclick="GoBack">Назад</button>

<EditForm Model="@_division">
    <div>
        <label for="title">Наименование</label>
        <input id="title" placeholder="Наименование" @bind-value="@_division.Title" @oninput="SaveDivision" />
    </div>
    <div>
        <label for="date">Дата создания</label>
        <input type="date" id="date" placeholder="Выберите дату" @bind-value="@_division.CreateDate" @oninput="SaveDivision" />
    </div>
    <div>
        <label for="parent">Родительское подразделение</label>
        <select id="parent" @bind="@_division.DivisionId">
            @foreach (var divisionFromData in _divisions)
            {
                <option value="@divisionFromData.Id">@divisionFromData.Title</option>
            }
        </select>
    </div>
    <div>
        <label for="desc">Описание</label>
        <textarea id="desc" @bind="_division.Description" @oninput="(e) => { _division.Description = (string)e.Value; SaveDivision(); }"></textarea>
    </div>
    <div>
        <div>
            <label for="child">Вложенные подразделения</label>

            <select id="child" @bind="_subDivisionId">
                @foreach (var divisionFromData in _divisionsToAdd)
                {
                    <option value="@divisionFromData.Id">@divisionFromData.Title</option>
                }
            </select>
            <button @onclick="AddSubDivision" class="main--btn inverted">Добавить подразделение</button>
        </div>
        <div class="subdiv__wrapper">
            @foreach (var subDivision in _subDivisionsToAdd)
            {
                @if (subDivision != null)
                {
                    <div class="subdiv__item">
                        <div>
                            <span>@subDivision.Title</span>
                            <span>@subDivision.CreateDate.ToShortDateString()</span>
                        </div>

                        <button @onclick="() => DeleteSubDivision(subDivision)" class="main--btn inverted">Удалить</button>
                    </div>
                }
            }
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(_errorText))
    {
        @_errorText
    }

    <button @onclick="async () => await ApplyButton_OnClick()" class="main--btn inverted">Принять</button>
</EditForm>


@code {
    [Parameter]
    public int Id { get; set; }

    private Division _division;
    private Division _divisionBackup;
    private int? _subDivisionId;
    private List<Division> _divisions;
    private List<Division> _divisionsToAdd;
    private List<Division> _subDivisionsToAdd;
    private int _divisionId;
    private string _errorText;

    public int DivisionId
    {
        get => _divisionId;
        set
        {
            _divisionId = value;
            _division.DivisionId = value;
            _storageService.SetItem("currentDivisionIdFromList", value);
            SaveDivision();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _errorText = string.Empty;
        _divisions = _divisionsToAdd = _subDivisionsToAdd = new List<Division>();
        await InitializeData();
        StateHasChanged();
    }

    private async Task InitializeData()
    {
        _division = null;
        var divisionFromSession = GetDivisionFromSession();
        //_subDivisionsToAdd = new List<Division>();
        if (!Program.AppData.SelectedDivision.CheckCopied() && divisionFromSession != null)
        {
            _division = divisionFromSession;
        }
        else
        {
            _division = _stateMachine.CurrentState is StateMachine.State.Add
                ? new Division { DivisionId = Program.AppData.SelectedDivisionFromList?.Id ?? 0 }
                : Program.AppData.SelectedDivision;
            SaveDivision();
        }

        _divisionBackup = new Division(_division);

        await GetDivisions();

        if (_stateMachine.CurrentState == StateMachine.State.Add && divisionFromSession != null
            || _division.SubDivisions.Count > 0)
            FillSubDivisions();
    }

    private Division GetDivisionFromSession()
    {
        try
        {
            return _storageService.GetItem<Division>("currentDivision");
        }
        catch
        {
            return null;
        }
    }

    private async Task GetDivisions()
    {
        var divisionsList = (await Program.AppData.GetDivisionsAsync()).Where(d => d.Id != _division.Id).ToList();
        divisionsList.Insert(0, new Division { Title = "Нет", DivisionId = -1 });
        _divisionsToAdd = divisionsList.Where(d => d.DivisionId != null && d.DivisionId != 0).ToList();
        _divisions = divisionsList.ToList();
    }

    /// <summary>
    /// Заполняет список вложенных подразделений
    /// </summary>
    private void FillSubDivisions()
    {
        var subDivisions = _division.SubDivisions.ToList();

        foreach (var subDivision in subDivisions)
        {
            var subDivisionFromList = _divisionsToAdd.Where(d => d.Id != _division.DivisionId).FirstOrDefault(d => d.Id == subDivision.Id);
            _divisions.Remove(subDivisionFromList);
            _divisionsToAdd.Remove(subDivisionFromList);
            _subDivisionsToAdd.Add(subDivisionFromList);
        }
    }

    /// <summary>
    /// Добавляет подразделение в список вложенных подразделений
    /// </summary>
    private void AddSubDivision()
    {
        var divisionToAdd = _divisionsToAdd.FirstOrDefault(d => d.Id == _subDivisionId);

        if (divisionToAdd is null)
            return;

        _divisions.Remove(divisionToAdd);
        _divisionsToAdd.Remove(divisionToAdd);
        _subDivisionsToAdd.Add(divisionToAdd);

        _division.SubDivisions.Add(divisionToAdd);

        if (_division.DivisionId == _subDivisionId)
            _division.DivisionId = 0;

        _subDivisionId = null;
        SaveDivision();
    }

    private async Task ApplyButton_OnClick()
    {
        _errorText = string.Empty;

        if (string.IsNullOrWhiteSpace(_division.Title))
        {
            _errorText = "Наименование должно быть заполнено!";
            return;
        }

        var childrenDivision = _divisions.FirstOrDefault(d => d.Id == _division.DivisionId);

        if (childrenDivision != null 
            && (_divisionBackup.DivisionId is 0 || _divisionBackup.DivisionId is null) 
            && childrenDivision.HasParent(_division))
        {
            _errorText = @"Попытка изменить поле корневого подразделения ""Родительское подразделение"" на одно из вложенных подразделений";
            return;
        }

        _subDivisionsToAdd = _subDivisionsToAdd.Where(d => d != null).ToList();

        _division.SubDivisions = _subDivisionsToAdd;

        var divisions = new List<Division> { _division};
        if (_division.DivisionId != 0)
        {
            var parentDivision = _divisions.FirstOrDefault(d => d.Id == _division.DivisionId);
            if (parentDivision != null)
                divisions.Add(parentDivision);
        }

        var subdivisions = _division.SubDivisions.Select(d =>
        {
            var division = new Division(d)
                {
                    DivisionId = _division.Id
                };

            return division;
        });

        divisions.AddRange(subdivisions);

        if (TreeHelper.IsLoop(divisions))
        {
            _errorText = @"Попытка создать цикл из родительского подразделения и вложенных подразделений";
            return;
        }

        if (_division.DivisionId == 0)
            _division.DivisionId = null;

        _division.ParentDivision = null;

        Debug.WriteLine(_subDivisionsToAdd.Count);

        if ( _division.DivisionId != null && _subDivisionsToAdd.Any(d => d.Id == _division.DivisionId))
            _division.DivisionId = _divisionsToAdd.FirstOrDefault(d => d.Id > _division.DivisionId)?.Id;

        var response = _stateMachine.CurrentState is StateMachine.State.Change
            ? await PutDivisionAsync()
            : await PostDivisionAsync();

        if (!response.IsSuccessStatusCode)
        {
            Debug.WriteLine(await response.Content.ReadAsStringAsync());
            return;
        }

        await Program.AppData.InitializeBaseProperties();
        _eventAggregator.InvokeDivisionCollectionChanged();

        _navigationManager.NavigateTo(Program.LastPageUrl);
    }

    private async Task<HttpResponseMessage> PutDivisionAsync()
    {
        var response = await _http.PutAsJsonAsync("divisions", _division);
        return response;
    }

    private async Task<HttpResponseMessage> PostDivisionAsync()
    {
        var response = await _http.PostAsJsonAsync("divisions", _division);

        return response;
    }

    private void DeleteSubDivision(Division subDivision)
    {
        _subDivisionsToAdd.Remove(subDivision);
        _divisionsToAdd.Add(subDivision);

        _division.SubDivisions = _subDivisionsToAdd;
        _storageService.SetItem("currentDivision", _division);
    }

    private void SaveDivision()
    {
        _storageService.Clear();
        _storageService.SetItem("currentDivision", _division);
    }

    private void GoBack()
    {
        _stateMachine.SetState(StateMachine.State.Idle);
        _navigationManager.NavigateTo(Program.LastPageUrl);
        _storageService.Clear();
    }

}