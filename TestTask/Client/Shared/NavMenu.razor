@using TestTask.Shared
@using System.Net
@using TestTask.Client.Services
@using System.Diagnostics
@using Blazored.SessionStorage
@using Newtonsoft.Json
@inject HttpClient _http
@inject StateMachine _stateMachine
@inject NavigationManager _navigationManager
@inject EventAggregator _eventAggregator
@inject ISessionStorageService _storageService
<div>
    <a class="sidebar__title" href="">Подразделения</a>
</div>



@if (_divisions is null)
{
    <span style="color: white">Загрузка</span>
}
else
{
    <div>
        <button @onclick="DivisionAddButton_OnClick" class="main--btn">Добавить подразделение</button>
    </div>
    <div>
        <ul>
            @foreach (var division in _divisions.Where(d => d.DivisionId is null))
            {
                <li>
                        <a style="cursor: pointer" @onclick="() => SetCurrentDivision(division)">@division.Title</a>
                        <img src="css/delete.svg" style="cursor: pointer" @onclick="() => DeleteDivisionButton_OnClick(division)" alt=""/>
                        <img src="css/edit.svg" style="cursor: pointer" @onclick="() => ChangeDivisionButton_OnClick(division)" alt=""/>
                        @if (division.SubDivisions != null)
                        {
                            @(GetList(division, @<div></div>))
                        }
                    </li>
            }
        </ul>
    </div>
}

@if (_modalOpen)
{
    <Modal Title="@_modalTitle"
           Text="@_modalText"
           OnClose="Modal_OnClose"></Modal>
}

@code {
    private List<Division> _divisions;
    private bool _collapseNavMenu = true;
    private string _modalTitle;
    private string _modalText;
    private bool _modalOpen;

    protected override async Task OnInitializedAsync()
    {
        _eventAggregator.DivisionCollectionChanged += async () =>
        {
            await GetDivisions();
            StateHasChanged();
        };

        await GetDivisions();

    }

    private async Task GetDivisions()
    {
        _divisions = Program.AppData.Divisions.ToList();
        StateHasChanged();
    }

    private string GetDivisionHrefById(int divisionId)
    {
        return "employees/" + divisionId;
    }

    private RenderFragment GetList(Division division, RenderFragment markup)
    {
        foreach (var subDivision in _divisions.Where(d => d.DivisionId == division.Id))
        {
            markup += @<li>
                          <div class="pd1248">
                              <a style="cursor: pointer" @onclick="() => SetCurrentDivision(subDivision)">@subDivision.Title</a>
                              <img src="css/delete.svg" style="cursor: pointer" @onclick="() => DeleteDivisionButton_OnClick(subDivision)" alt=""/>
                              <img src="css/edit.svg" style="cursor: pointer" @onclick="() => ChangeDivisionButton_OnClick(subDivision)" alt=""/>
                          </div>
                      </li>;
                          
                          if (subDivision.SubDivisions != null)
                              markup += GetList(subDivision, @<div></div>);
        }
        return @<ul>@markup</ul>;
    }

    private void DivisionAddButton_OnClick()
    {
        _stateMachine.SetAddState();
        _navigationManager.NavigateTo("divisionInfo");
    }

    private async Task DeleteDivisionButton_OnClick(Division division)
    {
        Program.AppData.CurrentDivision = division;
        await _storageService.SetItemAsync("currentDivision", division);
        _modalTitle = "Подтверждение удаления";
        _modalText = "Вы действительно хотите удалить подразделение?";
        _modalOpen = true;
        _stateMachine.SetDeleteState();
    }

    private async Task Modal_OnClose(bool success)
    {
        _modalOpen = false;
        if (_stateMachine.CurrentState != StateMachine.State.Delete)
            return;

        var divisionToDelete = Program.AppData.CurrentDivision;
        Program.AppData.CurrentDivision = null;
        await _storageService.SetItemAsync<Division>("currentDivision", null);

        if (!success)
            return;

        var response = await _http.DeleteAsync($"divisions?id={divisionToDelete.Id}");

        if (!response.IsSuccessStatusCode)
        {
            _stateMachine.SetIdleState();
            _modalOpen = true;
            _modalTitle = "Ошибка удаления";
            _modalText = "Не удалось удалить подразделение";
            return;
        }

        await GetDivisions();
    }

    private void ChangeDivisionButton_OnClick(Division division)
    {
        _stateMachine.SetChangeState();
        Program.AppData.CurrentDivision = division;

        _navigationManager.NavigateTo("divisionInfo");
    }

    private async Task SetCurrentDivision(Division division)
    {
        await _storageService.SetItemAsync("currentDivision", division);
        Program.AppData.CurrentDivision = division;

        _navigationManager.NavigateTo(GetDivisionHrefById(division.Id));
    }
}

