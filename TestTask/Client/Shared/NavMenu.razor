@using TestTask.Shared
@using System.Net
@using TestTask.Client.Services
@using System.Diagnostics
@using Blazored.SessionStorage
@using Newtonsoft.Json
@inject HttpClient _http
@inject StateMachine _stateMachine
@inject NavigationManager _navigationManager
@inject EventAggregator _eventAggregator
@inject ISyncSessionStorageService _storageService
<div>
    <a class="sidebar__title" href="">Подразделения</a>
</div>

@if (_divisions is null)
{
    <span style="color: white">Загрузка</span>
}
else
{
    <div>
        <button @onclick="DivisionAddButton_OnClick" class="main--btn">Добавить подразделение</button>
    </div>
    <div>
        <ul>
            @foreach (var (id, division) in GetMainDivisions())
            {
                <li @key="id">
                        <a style="cursor: pointer; color: #fff; @(Program.CurrentDivisionId == id ? "text-decoration: underline;" : "")" @onclick="async () => await SetCurrentDivision(division)">@division.Title</a>
                        <img src="css/edit.svg" style="cursor: pointer" @onclick="() => ChangeDivisionButton_OnClick(division)" alt=""/>
                        <img src="css/delete.svg" style="cursor: pointer" @onclick="() => DeleteDivisionButton_OnClick(division)" alt=""/>
                        @GetList(division, @<div></div>)
                </li>
            }
        </ul>
    </div>
}

@if (_modalOpen)
{
    <Modal Title="@_modalTitle"
           Text="@_modalText"
           IsConfirmation="@_modalConfirmation"
           OnClose="Modal_OnClose"></Modal>
}

@code {
    private Dictionary<int,Division> _divisions;
    private bool _collapseNavMenu = true;
    private string _modalTitle;
    private string _modalText;
    private bool _modalOpen;
    private bool _modalConfirmation;


    protected override async Task OnInitializedAsync()
    {
        _eventAggregator.DivisionCollectionChanged += async () =>
        {
            await GetDivisions();
            StateHasChanged();
        };

        await GetDivisions();
    }

    private async Task GetDivisions()
    {
        _divisions = (await Program.AppData.GetDivisionsAsync()).ToDictionary(d => d.Id, d => d);
        StateHasChanged();
    }

    private string GetDivisionHrefById(int divisionId)
    {
        return "employees/" + divisionId;
    }

    private RenderFragment GetList(Division division, RenderFragment markup)
    {
        var subDivisions = _divisions.Where(d => d.Value.DivisionId == division.Id)
            .ToDictionary(d => d.Key, d => d.Value);

        if (!subDivisions.Any())
        {
            return @<div></div>;
        }

        foreach (var (id, subDivision) in subDivisions)
        {
            markup += @<li @key="id">
                          <div class="pd1248">
                              <a style="cursor: pointer; color: #fff; @(Program.CurrentDivisionId == id ? "text-decoration: underline;" : "")" @onclick="async () => await SetCurrentDivision(subDivision)">@subDivision.Title</a>
                              <img src="css/edit.svg" style="cursor: pointer" @onclick="() => ChangeDivisionButton_OnClick(subDivision)" alt=""/>
                              <img src="css/delete.svg" style="cursor: pointer" @onclick="() => DeleteDivisionButton_OnClick(subDivision)" alt=""/>
                          </div>
                      </li>;
            markup += GetList(subDivision, @<div></div>);
        }
        return @<ul>@markup</ul>
    ;
    }

    private void DivisionAddButton_OnClick()
    {
        _stateMachine.SetAddState();
        Program.AppData.ClearDivisionBackup();
        _navigationManager.NavigateTo("divisionInfo/0");
    }

    private void DeleteDivisionButton_OnClick(Division division)
    {
        Program.AppData.CurrentDivision = division;
        _modalTitle = "Подтверждение удаления";
        _modalText = "Вы действительно хотите удалить подразделение?";
        _modalOpen = true;
        _modalConfirmation = true;
        _stateMachine.SetDeleteState();
    }

    private async Task Modal_OnClose(bool success)
    {
        _modalOpen = false;
        if (_stateMachine.CurrentState != StateMachine.State.Delete)
            return;

        var divisionToDelete = Program.AppData.CurrentDivision;
        Program.AppData.CurrentDivision = null;

        if (!success)
            return;

        var response = await _http.DeleteAsync($"divisions?id={divisionToDelete.Id}");

        if (!response.IsSuccessStatusCode)
        {
            _stateMachine.SetIdleState();
            _modalOpen = true;
            _modalTitle = "Ошибка удаления";
            _modalText = "Не удалось удалить подразделение";
            _modalConfirmation = false;
            return;
        }

        await Program.AppData.InitializeBaseProperties();
        await GetDivisions();
        var divisionFromSession = _storageService.GetItem<Division>("currentDivision");
        if (divisionFromSession != null && divisionFromSession.Id == divisionToDelete.Id)
            _storageService.Clear();
        if (Program.LastPageUrl == "employees/" + divisionToDelete.Id)
            _navigationManager.NavigateTo("");
    }

    private void ChangeDivisionButton_OnClick(Division division)
    {
        _stateMachine.SetChangeState();

        if (Program.DivisionInfoPageOpened)
            Program.AppData.RecoverDivision();

        if (Program.EmployeeInfoPageOpened)
        {
            Program.AppData.RecoverEmployee();
            Program.EmployeeInfoPageOpened = false;
        }

        Program.AppData.CurrentDivision = division;
        Program.DivisionInfoPageOpened = true;

        _navigationManager.NavigateTo("divisionInfo/" + division.Id);
    }

    private async Task SetCurrentDivision(Division division)
    {
        _stateMachine.SetIdleState();
        _divisions = new Dictionary<int, Division>();
        _divisions = (await Program.AppData.GetDivisionsAsync()).ToDictionary(d => d.Id, d => d);
        var url = GetDivisionHrefById(division.Id);
        Program.LastPageUrl = url;

        if (Program.DivisionInfoPageOpened)
        {
            Program.AppData.RecoverDivision();
            Program.DivisionInfoPageOpened = false;
        }
        if (Program.EmployeeInfoPageOpened)
        {
            Program.AppData.RecoverEmployee();
            Program.EmployeeInfoPageOpened = false;
        }

        Program.AppData.CurrentDivision = division;
        Program.CurrentDivisionId = division.Id;

        if (Program.AfterEmployeeInfoPage)
        {
            _navigationManager.NavigateTo("Redirect");
            Program.AfterEmployeeInfoPage = false;
        }
        _navigationManager.NavigateTo(url);
    }

    private IEnumerable<KeyValuePair<int, Division>> GetMainDivisions()
    {
        return _divisions.Where(d => d.Value.DivisionId is null || d.Value.DivisionId == 0);
    }
}


